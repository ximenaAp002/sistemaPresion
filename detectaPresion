#include <Adafruit_Keypad.h>
#include <Adafruit_Keypad_Ringbuffer.h>
 
#include <Arduino_FreeRTOS.h>
#include <semphr.h>  // add the FreeRTOS functions for Semaphores (or Flags).
#include <queue.h>
 
#include <Wire.h>
// #include <LiquidCrystal_I2C.h>
 
 
//keypad
const byte rowsCount = 4;
const byte columsCount = 4;
 
 
char numPad[3];
char subChar[3];
int longitud = 0;
 
const byte rowPins[rowsCount] = { 11, 10, 9, 8 };
const byte columnPins[columsCount] = { 7, 6, 5, 4 };
 
 
char keys[rowsCount][columsCount] = {
   { '1','2','3', 'A' },
   { '4','5','6', 'B' },
   { '7','8','9', 'C' },
   { '*','0','#', 'D' }
};
 
Keypad keypad = Keypad(makeKeymap(keys), rowPins, columnPins, rowsCount, columsCount);
LiquidCrystal_I2C lcd(0x27,16,2);
 
 
// PINE
 
int ALV = 2;
int MOTOMAMI = 3;    // Input3 conectada al pin 1 -> bomba
int SENSUALON = A3;   // SENS conectada al pin A2 -> Sensor de presion
 
bool flagMenu = 1; // Bandera
bool flagErase = 1;
bool bandera = 1;
 
 
//Variabel
int ideal = 0;
int sensual;
int margen = 20;
int margenSuperior;
int margenInferior;
 
 
// Declare a mutex Semaphore Handle which we will use to manage the Serial Port.
// It will be used to ensure only one Task is accessing this resource at any time.
SemaphoreHandle_t xSerialSemaphore;
QueueHandle_t integerQueue;
QueueHandle_t superiorQueue;
QueueHandle_t inferiorQueue;
 
// define two Tasks for DigitalRead & AnalogRead
void TaskDigitalRead( void *pvParameters );
void TaskAnalogRead( void *pvParameters );
 
void menu1(){
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Sensor: ");
    lcd.print(sensual);
    lcd.setCursor(0, 1);
    lcd.print("Valor ideal: ");
    lcd.print(ideal);
    delay(200);
}
 
void menu2(){
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("ingrese");
    lcd.setCursor(0, 1);
    lcd.print("valor: ");
    for(int i = 0; i < longitud; i++)
      lcd.print(numPad[i]);
    delay(200);
}
 
void menu3(){
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("No puedes agregar mas caracteres");
  delay(2000);
 
}
 
 
// the setup function runs once when you press reset or power the board
void setup() {
 
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
 
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
  }
 
  // Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
  // because it is sharing a resource, such as the Serial port.
  // Semaphores should only be used whilst the scheduler is running, but we can set it up here.
  if ( xSerialSemaphore == NULL )  // Check to confirm that the Serial Semaphore has not already been created.
  {
    xSerialSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore we will use to manage the Serial Port
    if ( ( xSerialSemaphore ) != NULL )
      xSemaphoreGive( ( xSerialSemaphore ) );  // Make the Serial Port available for use, by "Giving" the Semaphore.
  }
 
  // Now set up two Tasks to run independently.
  xTaskCreate(
    TaskSensorRead
    ,  "SensorRead"  // A name just for humans
    ,  128  // This stack size can be checked & adjusted by reading the Stack Highwater
    ,  NULL //Parameters for the task
    ,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
    ,  NULL ); //Task Handle
 
 
  xTaskCreate(
    TaskKeypadRead
    ,  "KeypadRead" // A name just for humans
    ,  128  // Stack size
    ,  NULL //Parameters for the task
    ,  1  // Priority
    ,  NULL );
 
   xTaskCreate(
    TaskMotorActive
    ,  "KeypadRead" // A name just for humans
    ,  128  // Stack size
    ,  NULL //Parameters for the task
    ,  1  // Priority
    ,  NULL );
 
  // Now the Task scheduler, which takes over control of scheduling individual Tasks, is automatically started.
 
  integerQueue = xQueueCreate(20, // Queue length
                              sizeof(int) // Queue item size
                              );
 
  superiorQueue = xQueueCreate(10, sizeof(int));
  inferiorQueue = xQueueCreate(10, sizeof(int));                              
}
 
 
void loop(){}
 
 
void TaskSensorRead( void *pvParameters __attribute__((unused)) )  // This is a Task.
{
(void) pvParameters;
 
  for (;;)
  {
    // Read the input on analog pin 0:
    sensual = analogRead(SENSUALON);
 
    /**
     * Post an item on a queue.
     * https://www.freertos.org/a00117.html
     */
    xQueueSend(integerQueue, &sensual, portMAX_DELAY);
 
    // One tick delay (15ms) in between reads for stability
    vTaskDelay(1);
  }
}
 
 
void TaskMotorActive( void *pvParameters __attribute__((unused)) )  // This is a Task.
{
(void) pvParameters;
 
  for (;;)
  {
    // Read the input on analog pin 0:
    char key = keypad.getKey();
 
    if (key) {
    if(key == '#'){
      flagMenu = !flagMenu;
    }
  }
  if(!flagMenu){
    if(flagErase){
      for(int i = longitud; i < 3; i++){
        numPad[i] = 0;
      }
      flagErase = 0;
    }
    ideal = atoi(numPad);
    longitud = 0;
    menu1();
  }
  else{
    flagErase = 1;
    if(key >= 48 && key <= 57){
      if(longitud+1 > 3){
        menu3();
      }
      else{
        numPad[longitud] = key;
        longitud++;
      }
    }
    if(key == '*'){
      numPad[longitud-1] = 0;
      longitud--;
    }
      menu2();
  }
 
    Serial.print(ideal);
    Serial.print(" ");
    Serial.print(margenSuperior);
    Serial.print(" ");
    Serial.print(margenInferior);
    Serial.print(" ");
    Serial.print(sensual);
    Serial.print(" ");
    Serial.println(bandera);
 
    margenSuperior = ideal + margen;
    margenInferior = ideal - margen;
 
    xQueueSend(superiorQueue, &margenSuperior, portMAX_DELAY);
    xQueueSend(inferiorQueue, &margenInferior, portMAX_DELAY);
    }
}
 
void TaskKeypadRead( void *pvParameters __attribute__((unused)) )  // This is a Task.
{
(void) pvParameters;
 
  for (;;)
  {
    // Read the input on analog pin 0:
    char key = keypad.getKey();
 
    xQueueReceive(superiorQueue, &margenSuperior, portMAX_DELAY);
    margenSuperior = margenSuperior[0];
   
    if(xQueueReceive((inferiorQueue, &margenInferior, portMAX_DELAY) != NULL){
      margenInferior = margenInferior[0];
    }
    if(xQueueReceive((integerQueue, &sensual, portMAX_DELAY)) != NULL ){
      margenInferior = sensual[0];
    }
 
 
  if(bandera){
    if(sensual > ideal){
      Serial.println(1);
      digitalWrite(MOTOMAMI, LOW);
      digitalWrite(ALV, HIGH);
    }
    else if(sensual < ideal){
      Serial.println("2");
      digitalWrite(MOTOMAMI, HIGH);
      digitalWrite(ALV, LOW);
    }
    else bandera = 0;
  }
  else{
    if(sensual < margenSuperior && sensual > margenInferior){
      Serial.println("3");
      digitalWrite(MOTOMAMI, LOW);
      digitalWrite(ALV, LOW);
    }
    else if(sensual > margenSuperior){
      Serial.println("4");
      digitalWrite(MOTOMAMI, LOW);
      digitalWrite(ALV, HIGH);
      bandera = 1;
    }
    else if(sensual < margenInferior){
      Serial.println("5");
      digitalWrite(MOTOMAMI, HIGH);
      digitalWrite(ALV, LOW);
      bandera = 1;
    }
  }
  delay(50);
 
}
}
